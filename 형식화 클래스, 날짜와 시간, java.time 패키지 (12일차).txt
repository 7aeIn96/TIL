1. 형식화 클래스
* java.text 패키지에 정의
* Locale : 지역화와 관련 클래스
국가 - 언어, 통화, 숫자 표기법
* 10000 / ISO / 2022-11-29T12:00:30 / 2022-11-29 12:00 etc..


   1. DecimalFormat
   * 형식화클래스 중 숫자를 형식화
   * 숫자 -> 특정 형식의 문자열
   *         2. SimpleDateFormat
      * Date와 Calendar는 날짜 데이터를 원하는 형태로
다양하게 출력하는 것은 불편하고 복잡함.
      *         * y : yyyy 년도
      * M : MM 월
      * d : dd 일
      * H : HH 시(0~23) / h (0~11) / a (AM / PM) / E 요일
      * m : mm 분(0~59)
      * s : ss 초(0~59)


         3. ChoiceFormat
         * 특정 범위에 속하는 값을 문자열로 반환
         *               4. MessageFormat
            * format : 데이터를 정해진 양식에 맞게 출력할 수 있도록 도와줌.
            * parse : 지정된 양식에서 필요한 데이터만 손쉽게 추출
            *                  2. 날짜와 시간
               1. Calender
               * 추상클래스, 생성자 protected -> 외부에서 객체 생성X
getInstance() : Calender 객체 : 현재 시간
getInstance()가 static인 이유 : 메서드 내 코드에서
인스턴스 변수를 사용하거나 메서드를 호출하지 않기 때문
ex) Calendar cal = Calendar.getInstance(); 
               * 달력 체계가 다른 국가, 내부에서 지역에 맞는 달력 객체 생성자
               * set 메서드 : 날짜와 시간을 지정
               * get 메서드 : 날짜와 시간을 조회
                  * add, roll : 지정한 필드에 값을 증가 or 감소
                  * add 메서드 : 다른 필드에 영향O : 다음 달로 넘어감.
                  * roll 메서드 :  다른 필드에 영향X : 해당 달에서 반복
                  *   

                     2. Date


                     3. java.time 패키지
        자바 1.8
                     * static of(...) -> 지정된 날짜 시간 기준 객체 생성
                     * static now() -> 현재 날짜 시간 기준 객체 생성
                     * 각 핵심 클래스별 변환, 추가
                     * to핵심클래스명 메서드 -> 변환 메서드
                     1. java.time - 핵심클래스
        Temporal, TemporalAccessor, TemporalAdjuster
        Temporal : 기준 인터페이스
        TemporalAccessor : 날짜와 시간 조회 관련 인터페이스
        TemporalAdjuster : 날짜와 시간 변경 관련 인터페이스


                     * LocalDate : 날짜
                     * LocalTime : 시간
                     * LocalDateTime : LocalDate + LocalTime : 날짜와 시간


                     * ZonedDateTime : LocalDateTime + 시간대
                     * 섬머타임 시간 조정까지 반영
                     * OffsetDateTime : LocalDateTime + 시간대
                     * UTC + 9 // 시간대 차이대로 계산


                     * Instant : EpochTime(Timestamp) : long 형태의 시간 표기법
                     * 1970, 1, 1, 자정 -> 천분의 일초로 카운팅한 수치(UTC+0)
        
        TemporalAmount
                     * Period : 날짜와 간격
                     * Duration : 시간의 간격


                     2. java.time.format - 형식화
        DateTimeFormatter
                     * format
        각 핵심 클래스(java.time)
                     * parse : 형식화된 문자열 -> java.time 핵심 클래스 변환


                     3. java.time.temporal - 필드와 단위
        TemporalField : 년, 월, 일과 같은 필드
                     * ChronoField (구현체)


        TemporalUnit : 날짜, 시간 관련 단위
                     * ChronoUnit (구현체)


                     4. java.time.zone - 시간대
ZoneId - Asia/Seoul
ZoneOffset - +9


                     5. 자주 사용하는 메서드
                     1. 특정 필드의 값 가져오기
                     * TemporalField ← chronoField
                     * get()
                     * getXXX()
                     *                        *   
요일생성코드


                        2. 필드의 값 변경하기
                        * with() : 변경
                        * plus() : 날짜, 시간 증가
                        * minus() : 날짜, 시간 감소


                        3. 날짜와 시간의 비교
                        * isAfter() : 시간 이후
                        * isBefore() : 시간 이전
                        * isEqual() : 동일 시간


                        4. LocalDateTime과 ZonedDateTime
                        * atZone(ZoneId …)
                        * ZoneId.of(“Asia/Seoul”)
                        * 섬머타임제와 같은 시간 변동도 반영


                        5. ZoneOffset
                        * ZonedOffset.of(“+9”)


                        6. OffsetDateTime


                        4. Instant
                        * 에포크타입 : UTC 0 기준 // 한국은 UTC +9
                        * 시간의 물리적 양 -> long ( 1970, 1. 1 자정, 천분의 1초)
                        * EpochTime
                        * TimeStamp
                        *   

                           5. Period(날짜 차이)와 Duration(시간 차이)
                           * between : static메서드, 두 날짜의 차이를 나타내는 Period 객체 반환
                           * until : 인스턴스메서드


                           6. 파싱과 포맷
                           * java.time.format 패키지
                           * DateTimeFormatter
                           * .ofPattern(패턴) : 원하는 출력형식 작성
                           * .format(Temporal Accessor …)
                           * 핵심 클래스
                           * .parse -> 파싱