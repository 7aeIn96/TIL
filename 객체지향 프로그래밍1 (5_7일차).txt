1. 인스턴스(instance - 실체)
* 생성된 객체
* 객체에 참조가 끊기면 가비지컬렉터(GC)가 메모리를 해제해줌.


2. 생성자
   * 객체를 생성해주는 메서드
   * ex) Student s1 = new Student(); <- 생성자
   * 클래스명과 동일한 명칭을 가짐.
   * 반환값 정의 X
   * 멤버변수의 초기화


* 기본생성자
   * 생성자가 아무것도 정의X - 컴파일러가 자동추가
* 생성자 오버로드
   * 동일한 생성자를 매개변수만 달리하여 여러개 정의
* 메서드 오버로드
   * 동일한 메서드를 매개변수와 반환값을 달리하여 여러개 정의


ex)
public Student(int _grade, int _schoolId, String _name) { // 기본 생성자
                grade(힙) = _grade;(스택)
                schoolId = _schoolId;
                name = _name;
        }


3. 접근제어자
* 클래스, 멤버 변수, 메서드
* public > protected > default > private
* public : 모든 패키지의 클래스 내부, 외부에서 접근가능
* protected : 동일(같은) 패키지 내부, 외부에서 접근가능
                다만 외부 패키지는 상속을 통해 클래스 내부에서만 접근가능
* default : 동일(같은) 패키지 내부, 외부에서 접근가능
* private : 현재 클래스 내부에서만 접근이 가능
________________


   * import
   * 패키지가 다를 때, 함께 사용할 클래스를 불러올 수 있음.
ex) import day06.Person;
import day06.*; (day06 모두)


   4. 정보은닉
   * 멤버변수 : 값의 통제 불가
-> 직접 대입해서 값을 입력하는 것을 지양


      * private 접근 제한 -> 외부 접근X
      * 접근과 통제는 별도의 메서드를 통해서 지정
        
      * getter, setter
      * 별도의 외부접근이 가능함.
      * setXXX()
      * getXXX()


      5. this 예약어
      * this는 생성된 인스턴스 스스로를 가리키는 예약어
      * 클래스 내부의 지역변수
: 생성된 객체의 주소 값으로 가지고 있음.
      * 클래스 내부 생성자 메서드 : this();
  

ex)
public void setMonth(int month) {
this.month(new Schedule2();) = month;(멤버변수)
public Schedule2(int year, int month, int day) {
        this.year(힙) = year;(스택)
}
________________


         6. static 변수, 클래스 변수, 클래스 메서드
         * 정적변수(움직이지 않음) / 고정된 위치
         * 변수, 메서드 앞에 예약어
         * 정적 변수는 정적인 방법으로 접근(권장)
         * 클래스명으로 접근 : 클래스명.변수명 ex) Student.schoolId


         * 정적인 메모리
         * 데이터 영역(정적인 메모리) - 클래스 로더 -> 클래스파일
         * 동적인 메모리
         * 스택 영역 - 함수(main 등)
         * 힙 영역 - 객체, 인스턴스


         * 클래스 메서드(정적 메서드)
         * 인스턴스 변수, 인스턴스 메서드 사용불가
         * 굳이 써야 하는 경우 -> 객체 생성
ex)
static void print2() {
String str = ("Grade = " + grade + ", schoolId = " + schoolId + ", name = " + name);
 -> 오류발생, 인스턴스 변수, 메서드 사용불가


         * 데이터 영역 ( 코드 & 상수 영역 )
         * 메서드 : 상수와 같다.
  





         * 향상된 for문, 배열
         * for(변수 : 배열) {
        반복 실행문;
}
________________


            7. 변수의 유효범위


            1. 지역변수
            * 스택에서 생성되고 소멸
            * 함수 지역 내에서만 유효한 변수
            2. 인스턴스 변수
            * 힙에서 생성되고 소멸
            * 객체가 생성되어야만 접근할 수 있는 변수
            3. 정적 변수
            * 데이터영역
            * 클래스명으로 객체 생성 상관없이 가능


            8. 싱글톤 패턴(SingleTon)
            * 객체를 단 1번만 생성하는 패턴


            1. 외부에서 객체를 생성 못하게 차단
            * private 생성자 메서드()
            2. 내부에서 정적 변수에 객체를 생성(private)
            3. 외부에서 객체에 접근할 수 있는 정적 메서드를 정의