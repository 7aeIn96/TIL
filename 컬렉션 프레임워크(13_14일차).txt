1. 컬렉션 프레임워크란?
* 데이터 군을 저장하는 클래스 등을 표준화한 설계
* 다수의 데이터를 저장할 수 있는 클래스 -> 컬렉션 클래스
* 다수의 데이터를 다루는 데 다양하고 풍부한 클래스 제공


*   

   2. 컬렉션 프레임워크의 핵심 인터페이스
   * Iterator - 반복자 : 반복 
   1. List 인터페이스 : 순차 자료구조
   * 순서가 있는 자료구조
   * 인덱스 번호로 접근 가능


   * 구현된 클래스
   * ArrayList
   * LinkedList
   * Stack
   * Vector


   * 자주 사용하는 메서드
   * 추가 : add()
   * 조회 : get(인덱스번호)
   * 제거 : remove(인덱스번호)
   * 포함여부 : contains(요소)
   * 요소의개수 : size()
                
________________


   2. Set 인터페이스 : 집합 자료구조
   * 중복이 없는 자료구조
   * 순서가 없는 자료구조
   * 인덱스 번호로 접근 불가


   * 구현된 클래스
   * HashSet
   * TreeSet


   * 자주 사용하는 메서드
   * 추가 : add()
   * 조회 : …
   * 제거 : remove()
   * 포함여부 : contains


   3. Map 인터페이스 : Diction 자료 구조 - 키워드 - 내용
   * 키와 값의 쌍으로 구성
   * 키 : 값을 찾기위한 열쇠 : 유일한 값(중복 X) : 집합자료구조
   * 값 : 값은 중복O


   * 구현된 클래스
   * HashMap
   * TreeMap
   * Properties


   * Hashtable


   * 자주 사용하는 메서드
   * 추가 : put(키, 값)
   * 조회 : …
   * 제거 : remove(키)
   * 포함여부 : containsKey, containsValue
   3. List 인터페이스
   1. ArrayList
   * 배열을 구현한 자료구조
   * Object[] elementData = new Object[10];


   * 물리적 메모리에 순차적으로 등록
   * 데이터 조회 빠름
   * 데이터 변경 X -> 새로운 배열 생성
   * 데이터 추가, 삭제 시 불리
   *   

      * ArrayList 기본 용량 10
      * 배열의 크기를 넘어서게 되면 현재 용량 2배로 늘린다.
      * 처음부터 데이터용량을 넉넉히 설정한다.
________________




      * 반복 작업의 표준화 : Iterator
      * 반복이 완료되면 끝(다시 반복X)
      * 다시 반복하려면 다시 Iterator 객체 생성
      * iterator()
      * hasNext() : 다음 요소가 있는지?
      * next() : 다음 요소를 조회
      *   

         * ListIterator : List 인터페이스 구현 클래스
         * 역방향 조회도 가능
         * hasNext()
         * next()


         * hasPrevious() : 이전 요소가 있는지?
         * Previous() : 이전 요소 조회
         *   

            * indexOf : 배열 안 인덱스번 찾기(정방향) / 없으면 -1
            * lastIndexOf : 배열 안 인덱스번호 찾기(역방향)
            2. LinkedList
            * 가장 기본적인 형태로 자료구조가 간단하며 사용하기 쉽고
데이터를 읽어오는데 걸리는 시간이 가장 빠르다.
            * 각 요소가 다음 연결 요소의 주소 가지고 있다.


               * 데이터 추가, 삭제에 유리하다 → 다음 요소의 주소만 변경
               * ArrayList와 달리 새로운 배열X → 메모리 소비 적음 
               * 데이터 조회에 불리하다 → 데이터 논리적으로 연결


               * Queue
               * offer() : 뒤에 추가
               * poll() : 앞에서 꺼내기
               *                  * 출력결과 : 0 1 2 3 4 5 6 7 8 9
                  * Stack
                  * push() : 가장 위에 추가
                  * pop() : 가장 위에서 꺼내기
                  *                     * 출력결과 : 9 8 7 6 5 4 3 2 1 0
                     4. Set 인터페이스
                     * 중복 X, 순서 X
                     * HashSet
                     * TreeSet
                     * HashSet + 정렬(이진트리)
                     * 이진검색트리 → 노드를 지날때마다 검색 범위가 ½
                     * 검색 시 빠른 이점
                     * 데이터 추가, 삭제, 수정 → 이진 트리 생성(성능 저하)


                     * 정렬의 기준
                     * java.lang.Comparable 인터페이스
                     * public int compareTo
                     * 정렬 → 오름차순, 내림차순


                     * 중복을 체크하는 기준
                     * equals()
                     * hashCode()
                     *                        * 중복 제거
                     *                           * 향상된 for문 배열, 컬렉션프레워크




                        5. Map 인터페이스
                        * 키, 값 쌍


                        * 키 - 중복 X - Set 자료형
                        * 값 - 중복 O


                        * HashMap()
                        * TreeMap()
                        * HashMap + 정렬


                        * put(“키”, “값”);


                        * put으로 값을 추가, 수정
                        * interface Map.Entry
                        * → 키, 값을 담은 객체
                        * → Map.Entry[]type


                        6. Arrays
                        * java.util
                        * 배열에 부가적인 유용한 기능
                        7. Collections
                        * java.util
                        * Collection에 부가적인 유용한 기능


                        8. 사용자 인터페이스