1. 상속이란 ?
* B클래스가 A클래스를 상속받으면 B클래스는 A클래스의 메서드 사용가능
* 부모클래스 : 상위클래스, 자식클래스 : 하위클래스


* 클래스 상속
* class 자식클래스 extends 부모클래스 {
}


   2. super
참고)  this - 본인 클래스 객체의 주소값
this() - 본인 클래스의 생성자


   * 컴파일러가 자동 추가해주는 것
   1. 기본 생성자
   2. 생성자 바로 첫줄 super();


   * super를 호출하면 상위클래스의 디폴트 생성자가 자동호출 
   * super - 지역변수 : 상위 클래스 객체의 주소값
   * super() - 생성자 : 상위 클래스의 생성자 메서드


  

 ex) 자식클래스 디폴트 생성자 B의 super는 A()를 의미


   1. 생성자 메서드 호출순서
   * C() -> B() -> A()
   2. 객체 생성 순서
   * A() -> B() -> C()
________________
      3. 상위클래스로 묵시적 클래스형 변환
      * 하위클래스 -> 상위클래스 형변환(묵시적 형변환)
-> 접근할 수 있는 자원의 크기만 변경


      * 상위클래스 -> 하위클래스(명시적 형변환)
-> 상위클래스 객체의 출처가 명확하지 않기 때문


      4. 다형성
      * 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
  

      * instanceof로 안전하게 확인가능
ex) if(A instanceof C) C AB=(C)A;


         * 배열
         * 모든 자료형에서 가능
         * 기본자료형, 참조자료형
         * 자료형[] 배열명 = new 자료형[공간의 개수]


         * java.io.FileInputStream
________________


         5. 메서드 오버라이딩(재정의)
         * 상위클래스의 메서드가 하위 클래스에서 구현할 내용과 맞지 않을경우
하위클래스에서 메서드를 재정의 할 수 있음.


            * 애노테이션
            * Annotation : 주석, 주해
            * 정보전달(기능 X)


            * @Override : 상위 클래스에 정의되어 있는 메서드인지?
            * 실수 방지용
            * 컴파일러 정보 전달( 이 클래스의 메서드는 재정의 메서드)


            * 가상메서드 테이블
  

            * 실체(본인) 인스턴스가 호출된다.
            1. 일반적 호출
            * 메서드에 명령 집합이 있는 메모리 위치에 참조하여 명령을 실행
            2. 가상메서드 호출
            * 가상메서드의 경우엔 가상 메서드 테이블 생성
            * 각 메서드 이름과 실제 메모리 주소 보유
            * 메서드가 호출되면 주소 값을 찾아서 해당 메서드 명령수행
________________
7. 묵시적 형변환과 메서드 재정의
            * 

8. 추상클래스(abstract)
            * 메서드가 정의 되지 않은 클래스(메서드의 구현체가 없다)
            * 공통기능 : 하위클래스 공통 멤버 변수, 메서드
            * 추상클래스 자체로는 객체생성X
            * 상속을 통해서 객체생성O
            * 추상클래스의 추상 메서드는 하위 클래스에서 반드시 구현
            * 반드시 따라야할 규칙, 가이드라인


            * 기본형
class 클래스 {
                변수
                메서드 : 구체적
}


            * 추상클래스형
abstract class {
        }


            *  추상클래스와 다형성
            * 하위클래스 객체 메모리의 일부분


9. Final 예약어 - 마지막 변경X
            1. 변수 - 상수 (데이터영역 상수)
            2. 메서드 - 재정의 불가
            3. 클래스 - 상속 불가


10. 인터페이스 (interface) : 규칙, 규약, 가이드라인, 설계
            * 클래스의 일종
            * 추상메서드로만 구성
            * API : Application Programming Interface (카카오 개발자 센터)
            * 클래스에서 인터페이스 구현하기
            * 클래스명 implements 인터페이스명 {}


11. 인터페이스의 요소 살펴보기
            1. 인터페이스 상수
            * 인터페이스는 자체 객체 생성 X
            * 외부 접근 가능한 정적 상수


            2. 디폴트 메서드
            * 인스턴스 메서드 : 하위클래스에서만 사용 가능
            * 구현된 메서드일 때 사용하기 용이


            3. 정적메서드
            * 객체 생성 X, 인터페이스 명으로 호출 가능
ex) Calculator.times
  



            4. private 메서드
            * 인터페이스 상속(extends)
            * 여러개를 동시에 상속받을 수 있음.
            * 상위 인터페이스에 선언한 추상 메서드를 모두 가짐.


            * 인터페이스 구현과 형변환
________________
12. 내부클래스
               * 클래스 내부에 있는 클래스


               1. 인스턴스 내부 클래스
               * 실체 : 생성된 객체 - 객체
               *                  *                     2. 정적 내부 클래스 : 정적 변수, 정적 메서드
                  * static : 일반 클래스와 큰 차이 X
                  *   ________________
                     3. 지역 내부 클래스(중요)
                     * 메서드(함수) 안에 클래스
                     * 추상클래스, 인터페이스 많이 사용
                     * 추상클래스, 인터페이스 객체를 생성할 수 있는 조건
                     1. 특정환경(지역 내부, 멤버 변수)
                     2. 미구현된 메서드를 구현


                     * Runnable - Run(인터페이스 중 하나)
                     *                        *                        * num1, num2는 지역변수다.
                     * 때문에 지역이 끝나면 메모리는 사라진다.
                     * 스택에서 메모리삭제되지 않고 연산하기 위해서
num1과 num2는 상수가 된다.
________________
                        4. 익명 내부 클래스
                        *